@page "/AGC"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;
@using System.Text.Json.Serialization;

<div style="width: 70px;">
    <input readonly size="2" maxlength="2" style="width:30px" @bind="@csmProgram">
    <input readonly size="2" maxlength="2" style="width:30px" @bind="@csmVerb">
    <input readonly size="2" maxlength="2" style="width:30px" @bind="@csmNoun">
    <input readonly size="5" maxlength="5" style="width:60px" @bind="@csmRegister1">
    <input readonly size="5" maxlength="5" style="width:60px" @bind="@csmRegister2">
    <input readonly size="5" maxlength="5" style="width:60px" @bind="@csmRegister3">
</div>
<br/>
<div style="width: 70px;">
    <input readonly size="2" maxlength="2" style="width:30px" @bind="@lmProgram">
    <input readonly size="2" maxlength="2" style="width:30px" @bind="@lmVerb">
    <input readonly size="2" maxlength="2" style="width:30px" @bind="@lmNoun">
    <input readonly size="5" maxlength="5" style="width:60px" @bind="@lmRegister1">
    <input readonly size="5" maxlength="5" style="width:60px" @bind="@lmRegister2">
    <input readonly size="5" maxlength="5" style="width:60px" @bind="@lmRegister3">
</div>


@code {
    private string _hubUrl;
    private HubConnection _hubConnection;

    string _csmProgram = "", _csmVerb = "", _csmNoun = "", _csmRegister1 = "", _csmRegister2 = "", _csmRegister3 = "";
    string _lmProgram = "", _lmVerb = "", _lmNoun = "", _lmRegister1 = "", _lmRegister2 = "", _lmRegister3 = "";
    #region CSM AGC params

    [Parameter]
    public string csmProgram
    {
        get
        {
            return _csmProgram;
        }
        set
        {
            _csmProgram = value;
        }
    }

    [Parameter]
    public string csmVerb
    {
        get
        {
            return _csmVerb;
        }
        set
        {
            _csmVerb = value;
        }
    }

    [Parameter]
    public string csmNoun
    {
        get
        {
            return _csmNoun;
        }
        set
        {
            _csmNoun = value;
        }
    }

    [Parameter]
    public string csmRegister1
    {
        get
        {
            return _csmRegister1;
        }
        set
        {
            _csmRegister1 = value;
        }
    }

    [Parameter]
    public string csmRegister2
    {
        get
        {
            return _csmRegister2;
        }
        set
        {
            _csmRegister2 = value;
        }
    }

    [Parameter]
    public string csmRegister3
    {
        get
        {
            return _csmRegister3;
        }
        set
        {
            _csmRegister3 = value;
        }
    }
    #endregion
    #region LM AGC params

    [Parameter]
    public string lmProgram
    {
        get
        {
            return _lmProgram;
        }
        set
        {
            _lmProgram = value;
        }
    }

    [Parameter]
    public string lmVerb
    {
        get
        {
            return _lmVerb;
        }
        set
        {
            _lmVerb = value;
        }
    }

    [Parameter]
    public string lmNoun
    {
        get
        {
            return _lmNoun;
        }
        set
        {
            _lmNoun = value;
        }
    }

    [Parameter]
    public string lmRegister1
    {
        get
        {
            return _lmRegister1;
        }
        set
        {
            _lmRegister1 = value;
        }
    }

    [Parameter]
    public string lmRegister2
    {
        get
        {
            return _lmRegister2;
        }
        set
        {
            _lmRegister2 = value;
        }
    }

    [Parameter]
    public string lmRegister3
    {
        get
        {
            return _lmRegister3;
        }
        set
        {
            _lmRegister3 = value;
        }
    }
    #endregion
    public async Task StartUpdateStream()
    {
        try
        {
            string baseUrl = navigationManager.BaseUri.Replace("http", "ws");
            _hubUrl = baseUrl.TrimEnd('/') + ExportDataHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
            .Build();

            // _hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            _hubConnection.On<string>("ExportData", ExportDataMessage);

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    private void HandleAGC(string spacecraft, JsonElement agc)
    {
        var program =   agc.GetProperty("ProgramD1").GetInt32().ToString() +
                        agc.GetProperty("ProgramD2").GetInt32().ToString();

        var verb =      agc.GetProperty("VerbD1").GetInt32().ToString() +
                        agc.GetProperty("VerbD2").GetInt32().ToString();

        var noun =      agc.GetProperty("NounD1").GetInt32().ToString() +
                        agc.GetProperty("NounD2").GetInt32().ToString();

        var register1 = agc.GetProperty("Register1D1").GetInt32().ToString() +
                        agc.GetProperty("Register1D2").GetInt32().ToString() +
                        agc.GetProperty("Register1D3").GetInt32().ToString() +
                        agc.GetProperty("Register1D4").GetInt32().ToString() +
                        agc.GetProperty("Register1D5").GetInt32().ToString();

        var register2 = agc.GetProperty("Register2D1").GetInt32().ToString() +
                        agc.GetProperty("Register2D2").GetInt32().ToString() +
                        agc.GetProperty("Register2D3").GetInt32().ToString() +
                        agc.GetProperty("Register2D4").GetInt32().ToString() +
                        agc.GetProperty("Register2D5").GetInt32().ToString();

        var register3 = agc.GetProperty("Register3D1").GetInt32().ToString() +
                        agc.GetProperty("Register3D2").GetInt32().ToString() +
                        agc.GetProperty("Register3D3").GetInt32().ToString() +
                        agc.GetProperty("Register3D4").GetInt32().ToString() +
                        agc.GetProperty("Register3D5").GetInt32().ToString();

        var illuminateCompLight = agc.GetProperty("IlluminateCompLight").GetBoolean();
        var illuminateUplinkActy = agc.GetProperty("IlluminateUplinkActy").GetInt32() == 1;
        var illuminateNoAtt = agc.GetProperty("IlluminateNoAtt").GetInt32() == 1;
        var illuminateStby = agc.GetProperty("IlluminateStby").GetInt32() == 1;
        var illuminateKeyRel = agc.GetProperty("IlluminateKeyRel").GetInt32() == 1;
        var illuminateOprErr = agc.GetProperty("IlluminateOprErr").GetInt32() == 1;
        var illuminateTemp = agc.GetProperty("IlluminateTemp").GetInt32() == 1;
        var illuminateGimbalLock = agc.GetProperty("IlluminateGimbalLock").GetInt32() == 1;
        var illuminateProg = agc.GetProperty("IlluminateProg").GetInt32() == 1;
        var illuminateRestart = agc.GetProperty("IlluminateRestart").GetInt32() == 1;
        var illuminateTracker = agc.GetProperty("IlluminateTracker").GetInt32() == 1;

        if(spacecraft == "CSM")
        {
            csmProgram = program;
            csmVerb = verb;
            csmNoun = noun;
            csmRegister1 = register1;
            csmRegister2 = register2;
            csmRegister3 = register3;
        }
        else if(spacecraft == "LM")
        {
            lmProgram = program;
            lmVerb = verb;
            lmNoun = noun;
            lmRegister1 = register1;
            lmRegister2 = register2;
            lmRegister3 = register3;
        }
        StateHasChanged();
    }
    private void ExportDataMessage(string message)
    {
        var je = JsonSerializer.Deserialize<JsonElement>(message);
        JsonElement agc;
        if(je.TryGetProperty("CSM_AGC", out agc))
        {
            if(agc.ValueKind != JsonValueKind.Object)
                return;
            HandleAGC("CSM", agc);
            StateHasChanged();
        }
        else if(je.TryGetProperty("LM_AGC", out agc))
        {
            if(agc.ValueKind != JsonValueKind.Object)
                return;
            HandleAGC("LM", agc);
            StateHasChanged();
        }
    }

    private async Task DisconnectAsync()
    {
        await _hubConnection.StopAsync();
        await _hubConnection.DisposeAsync();

        _hubConnection = null;
    }
    protected override async Task OnInitializedAsync()
    {
        await StartUpdateStream();
    }
}
